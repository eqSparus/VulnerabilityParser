package ru.parser.builders;

import lombok.AccessLevel;
import lombok.experimental.FieldDefaults;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.*;
import ru.parser.models.Item;

import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Collection;
import java.util.List;

@FieldDefaults(level = AccessLevel.PRIVATE)
public class BuildItemExcel implements BuilderExcel<Item> {

    static final String FONT_NAME = "Times New Roman";
    static final short FONT_HEIGHT = 14;
    static final int COLUMN_SIZE = 8000;

    static final Path pathFileReport = Path.of("report.xls");

    final List<String> columnNames;

    final Workbook wb;
    final Sheet sheet;

    int numberRow;

    public BuildItemExcel() {

        columnNames = List.of(
                "Номер", "Наименование уязвимости",
                "CVE", "CWE", "Capec High",
                "Capec Medium", "Capec Low", "No chance"
        );

        wb = new HSSFWorkbook();
        sheet = wb.createSheet("Report");

        for (var i = 0; i < columnNames.size(); i++) {
            sheet.setDefaultColumnStyle(i, getDefaultStyle());
        }
        var rowName = sheet.createRow(0);
        createTitleRow(rowName);
        numberRow = 1;
    }


    public void createRow(Item item) {

        var newRow = sheet.createRow(numberRow);

        createCell(newRow, 0, String.valueOf(numberRow));
        createCell(newRow, 1, item.getTitle());
        createCell(newRow, 2, item.getCve());
        createCell(newRow, 3, item.getCwe());
        createCell(newRow, 4, isEmptyGetDash(item.getCapecHigh()));
        createCell(newRow, 5, isEmptyGetDash(item.getCapecMedium()));
        createCell(newRow, 6, isEmptyGetDash(item.getCapecLow()));
        createCell(newRow, 7, isEmptyGetDash(item.getNoChance()));

        numberRow++;
    }

    private Cell createCell(Row row, int numberCell, String body) {
        var cell = row.createCell(numberCell);
        cell.setCellValue(body);
        return cell;
    }

    private void createTitleRow(Row rowName) {
        for (var i = 0; i < columnNames.size(); i++) {
            createCell(rowName, i, columnNames.get(i));
        }
    }

    private String isEmptyGetDash(Collection<String> list) {

        if (list.isEmpty()) {
            return "-";
        }
        return String.join(", ", list);
    }

    @Override
    public void close() throws IOException {

        for (int i = 0; i < columnNames.size(); i++) {
            sheet.setColumnWidth(i, COLUMN_SIZE);
        }

        try (var out = new FileOutputStream(pathFileReport.toFile())) {
            wb.write(out);
        }
        wb.close();
    }

    private CellStyle getDefaultStyle() {

        var style = wb.createCellStyle();

        style.setAlignment(HorizontalAlignment.CENTER);
        style.setVerticalAlignment(VerticalAlignment.CENTER);
        style.setWrapText(true);

        var font = wb.createFont();

        font.setFontName(FONT_NAME);
        font.setFontHeightInPoints(FONT_HEIGHT);

        style.setFont(font);

        return style;
    }

}
