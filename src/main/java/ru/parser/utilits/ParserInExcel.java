package ru.parser.utilits;

import lombok.AccessLevel;
import lombok.experimental.FieldDefaults;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import ru.parser.models.TableRow;

import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Collection;

@FieldDefaults(level = AccessLevel.PRIVATE)
public class ParserInExcel {

    static Path pathFileReport = Path.of("report.xls");

    public void createExcelFile(Collection<TableRow> tableRows) throws IOException {

        try (var wb = new HSSFWorkbook()) {
            var sheet = wb.createSheet("Report");
            var rowName = sheet.createRow(0);
            createTitleRow(rowName);

            int numberRow = 1;
            for (var tableRow : tableRows) {

                var newRow = sheet.createRow(numberRow);

                var cellNumber = newRow.createCell(0);
                cellNumber.setCellValue(numberRow);

                var cellTitle = newRow.createCell(1);
                cellTitle.setCellValue(tableRow.getTitle());

                var cellCVE = newRow.createCell(2);
                cellCVE.setCellValue(tableRow.getCve());

                var cellCWE = newRow.createCell(3);
                cellCWE.setCellValue(tableRow.getCwe());

                var cellCapecHigh = newRow.createCell(4);
                cellCapecHigh.setCellValue(isEmptyGetDash(tableRow.getCapecHigh()));

                var cellCapecMedium = newRow.createCell(5);
                cellCapecMedium.setCellValue(isEmptyGetDash(tableRow.getCapecMedium()));

                var cellCapecLow = newRow.createCell(6);
                cellCapecLow.setCellValue(isEmptyGetDash(tableRow.getCapecLow()));

                var cellCapecNoChance = newRow.createCell(7);
                cellCapecNoChance.setCellValue(isEmptyGetDash(tableRow.getNoChance()));

                numberRow++;
            }


            try (var out = new FileOutputStream(pathFileReport.toFile())) {
                wb.write(out);
            }
        }

    }


    private void createTitleRow(HSSFRow rowName) {
        var cellNumber = rowName.createCell(0);
        cellNumber.setCellValue("Номер");

        var cellTitle = rowName.createCell(1);
        cellTitle.setCellValue("Наименование уязвимости");

        var cellCVE = rowName.createCell(2);
        cellCVE.setCellValue("CVE");

        var cellCWE = rowName.createCell(3);
        cellCWE.setCellValue("CWE");

        var cellCapecHigh = rowName.createCell(4);
        cellCapecHigh.setCellValue("Capec High");

        var cellCapecMedium = rowName.createCell(5);
        cellCapecMedium.setCellValue("Capec Medium");

        var cellCapecLow = rowName.createCell(6);
        cellCapecLow.setCellValue("Capec Low");

        var cellCapecNoChance = rowName.createCell(7);
        cellCapecNoChance.setCellValue("No chance");
    }

    private String isEmptyGetDash(Collection<String> list){

        if (list.isEmpty()){
            return "-";
        }
        return String.join(", ", list);
    }
}
