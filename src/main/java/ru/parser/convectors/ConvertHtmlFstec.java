package ru.parser.convectors;

import lombok.AccessLevel;
import lombok.experimental.FieldDefaults;
import org.jsoup.Connection;
import org.jsoup.Jsoup;
import ru.parser.models.LevelAttack;
import ru.parser.models.TableRow;
import ru.parser.utilits.ParseInTableRow;
import ru.parser.utilits.ParserInExcel;

import java.io.IOException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@FieldDefaults(level = AccessLevel.PRIVATE)
public class ConvertHtmlFstec {

    static final int TIME_WAITING = 100_000;
    static final Pattern REG_REMOVE_CAPEC = Pattern.compile("CAPEC-");

    public void getAllTableRow(Path path) throws IOException {

        var titleVulnerability = ConvectorHtmlReport.getAllTitleVulnerability(path);

        var parserInExcel = new ParserInExcel();

        int numberRow = 1;
        for (var vul : titleVulnerability) {
            var row = createTableRow(vul);
            parserInExcel.createExcelFile(row, numberRow);
            numberRow++;
        }
        parserInExcel.close();
    }


    public TableRow createTableRow(String vulnerability) throws IOException {

        var url = String.format("https://bdu.fstec.ru/vul/%s", vulnerability);

        var pageVul = Jsoup.connect(url)
                .timeout(TIME_WAITING)
                .method(Connection.Method.GET)
                .get();

        var cveElement = pageVul.select("table > tbody > tr > td > div > ul > li > a");
        var cweElement = pageVul.select("table > tbody > tr > td > ul > li > a");

        var cveTitle = cveElement.text();
        var map = ParseInTableRow.parseCwe(cweElement);
        var capecMap = getAllCapec(map.get("url"));

        return TableRow.builder()
                .title(vulnerability)
                .cve(ParseInTableRow.parseCve(cveTitle))
                .cwe(map.get("cwe"))
                .capecLow(ParseInTableRow.isNullDefaultSet(capecMap.get("Low")))
                .capecMedium(ParseInTableRow.isNullDefaultSet(capecMap.get("Medium")))
                .capecHigh(ParseInTableRow.isNullDefaultSet(capecMap.get("High")))
                .noChance(ParseInTableRow.isNullDefaultSet(capecMap.get("No chance")))
                .build();
    }

    public Map<String, List<String>> getAllCapec(String url) throws IOException {

        var levelAttacks = new ArrayList<LevelAttack>();

        var pageCwe = Jsoup.connect(url)
                .timeout(TIME_WAITING)
                .method(Connection.Method.GET)
                .get();

        var elCapecView = pageCwe.getElementById("Related_Attack_Patterns");

        if (Objects.nonNull(elCapecView)) {
            var links = elCapecView.select("table > tbody > tr > td > a");

            for (var link : links) {

                var title = link.text().replaceAll(REG_REMOVE_CAPEC.pattern(), "");

                var pageCapec = Jsoup.connect(link.attr("href"))
                        .timeout(TIME_WAITING)
                        .method(Connection.Method.GET)
                        .get();

                var elLevelAttack = pageCapec.getElementById("Likelihood_Of_Attack");

                if (Objects.nonNull(elLevelAttack)) {
                    var attackLevel = elLevelAttack.select("p").text();

                    levelAttacks.add(new LevelAttack(title, attackLevel));

                } else {
                    levelAttacks.add(new LevelAttack(title, "No chance"));
                }
            }
        }

        return levelAttacks.stream()
                .collect(Collectors.groupingBy(LevelAttack::getLevel,
                        Collectors.mapping(LevelAttack::getTitle, Collectors.toList())));
    }

}
