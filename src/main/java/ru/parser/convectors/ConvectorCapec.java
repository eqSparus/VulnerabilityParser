package ru.parser.convectors;

import lombok.AccessLevel;
import lombok.experimental.FieldDefaults;
import org.jsoup.Connection;
import org.jsoup.Jsoup;
import ru.parser.models.LevelAttack;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@FieldDefaults(level = AccessLevel.PRIVATE)
public class ConvectorCapec implements Convector<Map<String, List<String>>>{

    static final int TIME_WAITING = 200_000;
    static final Pattern REG_REMOVE_CAPEC = Pattern.compile("CAPEC-");

    @Override
    public Map<String, List<String>> convert(String path) throws IOException {

        var levelAttacks = new ArrayList<LevelAttack>();

        var pageCwe = Jsoup.connect(path)
                .timeout(TIME_WAITING)
                .method(Connection.Method.GET)
                .get();

        var elCapecView = pageCwe.getElementById("Related_Attack_Patterns");

        if (Objects.nonNull(elCapecView)) {
            var links = elCapecView.select("table > tbody > tr > td > a");

            for (var link : links) {

                var title = link.text().replaceAll(REG_REMOVE_CAPEC.pattern(), "");

                var pageCapec = Jsoup.connect(link.attr("href"))
                        .timeout(TIME_WAITING)
                        .method(Connection.Method.GET)
                        .get();

                var elLevelAttack = pageCapec.getElementById("Likelihood_Of_Attack");

                if (Objects.nonNull(elLevelAttack)) {
                    var attackLevel = elLevelAttack.select("p").text();

                    levelAttacks.add(new LevelAttack(title, attackLevel));

                } else {
                    levelAttacks.add(new LevelAttack(title, "No chance"));
                }
            }
        }

        return levelAttacks.stream()
                .collect(Collectors.groupingBy(LevelAttack::getLevel,
                        Collectors.mapping(LevelAttack::getTitle, Collectors.toList())));
    }
}
